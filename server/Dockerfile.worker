# Multi-stage build for Worker process
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install Python and build dependencies (needed for some native modules)
RUN apk add --no-cache python3 make g++ cairo-dev jpeg-dev pango-dev giflib-dev

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --include=dev

# Copy source code
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies (including Tesseract for OCR)
RUN apk add --no-cache cairo jpeg pango giflib curl tesseract-ocr tesseract-ocr-data-eng

# Create app directory
WORKDIR /app

# Create a non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S worker -u 1001

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/prisma ./prisma

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads/receipts/original /app/uploads/receipts/processed /app/uploads/receipts/thumbnails /app/uploads/manuals /app/uploads/temp

# Change ownership to non-root user
RUN chown -R worker:nodejs /app

# Switch to non-root user
USER worker

# Health check for worker process
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
  CMD ps aux | grep -v grep | grep worker || exit 1

# Start the worker process
CMD ["node", "dist/worker.js"]
